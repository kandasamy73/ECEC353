                           Dr. Shackleford's
                      Fancy Table of UNIX Signals

+--------+-----------+-----------------------------+----------------+------------------+
| Number | Name      | Description                 | Default Action | M-T Behavior     |
+--------+-----------+-----------------------------+----------------+------------------+
|    1   | SIGHUP    | Hangup                      | Terminate      | Process          |
|    2   | SIGINT    | Terminal Interrupt (^C)     | Terminate      | Process          |
|    3   | SIGQUIT   | Terminal Quit (^\)          | Core Dump      | Process          |
|    4   | SIGILL    | Illegal Instruction         | Core Dump      | Offending Thread |
|    5   | SIGTRAP   | Breakpoint Trap             | Core Dump      | Process          |
|    6   | SIGABRT   | abort() called              | Core Dump      | Process          |
|    7   | SIGBUS    | Memory access error         | Core Dump      | Offending Thread |
|    8   | SIGFPE    | Floating point exception    | Core Dump      | Offending Thread |
|    9   | SIGKILL   | Unblockable termination     | Terminate      | Process          |
|   10   | SIGUSR1   | User-defined signal 1       | Terminate      | Process          |
|   11   | SIGSEGV   | Invalid memory reference    | Core Dump      | Offending Thread |
|   12   | SIGUSR2   | User-defined siganl 2       | Terminate      | Process          |
|   13   | SIGPIPE   | Write to broken pipe        | Terminate      | Offending Thread |
|   14   | SIGALRM   | Real-time timer expired     | Terminate      | Process          |
|   15   | SIGTERM   | SURE termination of process | Terminate      | Process          |
|   16   | SIGSTKFLT | Stack fault on coprocessor  | Terminate      | Process          |
|   17   | SIGCHLD   | Child terminated or stopped | Terminate      | Process          |
|   18   | SIGCONT   | Continue if stopped         | Continue       | Process          |
|   19   | SIGSTOP   | SURE process stop           | Stop           | Process          |
|   20   | SIGTSTP   | Terminal stop               | Stop           | Process          |
|   21   | SIGTTIN   | Terminal read from BG       | Stop           | Process          |
|   22   | SIGTTOU   | Terminal write from BG      | Stop           | Process          |
|   23   | SIGURG    | Urgent data on socket       | Ignore         | Process          |
|   24   | SIGXCPU   | CPU time limit exceeded     | Core Dump      | Process          |
|   25   | SIGXFSZ   | File size limit exceeded    | Core Dump      | Process          |
|   26   | SIGVTALRM | Virtual timer expired       | Core Dump      | Process          |
|   27   | SIGPROF   | Profiling timer expired     | Terminate      | Process          |
|   28   | SIGWINCH  | Terminal window size change | Ignore         | Process          |
|   29   | SIGIO     | Possible I/O waiting        | Terminate      | Process          |
|   30   | SIGPWR    | Power failure (for UPS)     | Terminate      | Process          |
|   31   | SIGSYS    | Invalid system call number  | Core Dump      | Process          |
+--------+-----------+-----------------------------+----------------+------------------+

                                NOTES

- Default actions my vary slightly between UNIX implementations

- Signals SIGKILL and SIGSTOP cannot be masked.  This is why they are
  described as being "SURE"

- Stopped processes can be resumed by being sent SIGCONT.  If a process
  is not stopped and receives SIGCONT, nothing happens.

- The presence of a process on the system can be checked by using kill()
  to send signal number 0 to its PID.  This sends nothing to the
  process, but kill() will return success if the process exists.

- If a signal disposition has been set to a handler, the signal is
  automatically masked while the handler is running and automatically
  unmasked when the handler returns.

- A signal sent to a process masking that particular signal is not
  queued.  When received, the particular signal is simply marked as
  pending and will be sent ONCE when the signal becomes unmasked,
  regardless of how many times the particular signal was received while
  the signal was masked by the process.

- The Default Action "Terminate" means the process stops executing and
  is removed from the system.

- The Default Action "Core Dump" means that the process is terminated
  AND an image of the process's virtual address space and CPU register
  state is saved to disk for post mortem analysis using a debugger, like
  gdb.  Note that the system administrator (or Linux distribution) may
  disable core dumps by default.

- When a signal is sent to multi-threaded process, a random thread is
  selected by the kernel to execute the signal handler.  A thread can
  mark itself not selectable by the kernel to execute the signal handler
  by modifying its personal signal mask via pthread_sigmask()

- If a signal sent to a multi-threaded process results in a 'stop' or
  'termination', all threads in the process are stopped or terminated.

- If a thread in a multi-threaded process sets a signal disposition
  (i.e. sets a handler, ignores a single, etc) it applies to all threads
  in the process.
